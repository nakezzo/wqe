from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext

import config
import db
import keyboards
import payments
from states import States

bot = Bot(config.BOT_TOKEN, parse_mode='HTML', disable_web_page_preview=True)
dp = Dispatcher(bot, storage=MemoryStorage())


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
async def set_default_commands(dp):
    await bot.set_my_commands([
        types.BotCommand('start', 'üè†')],
        types.BotCommandScopeAllPrivateChats())
    for admin in config.admins:
        await bot.set_my_commands([
            types.BotCommand('start', 'üè†'),
            types.BotCommand('admin', 'üíª–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')],
            types.BotCommandScopeChat(chat_id=admin))


# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(commands=['admin'], chat_type='private')
async def admin_menu(msg: types.Message):
    if msg.from_id in config.admins:
        users = len(db.User.select())

        await msg.answer(f'<b>üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users}\n\nüíé –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', reply_markup=keyboards.admin_menu())


# –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
@dp.callback_query_handler(text_startswith='change_')
async def change(call: types.CallbackQuery, state: FSMContext):
    what_change = call.data.split('_')[1]

    await state.update_data(change=what_change)

    match what_change:
        case 'welcomeMessage':
            await bot.edit_message_text('<b>üìù –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.cancel())
        case 'qiwi':
            await bot.edit_message_text('<b>ü•ù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π QIWI-P2P —Ç–æ–∫–µ–Ω</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.cancel())
        case 'crypto':
            await bot.edit_message_text('<b>ü§ñ –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π CryptoBot —Ç–æ–∫–µ–Ω</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.cancel())
        case 'crystal':
            await bot.edit_message_text('<b>üíé –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π CrystalPAY secret –∏ CrystalPAY name –≤ –≤–∏–¥–µ: secret name</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.cancel())
        case 'price':
            await bot.edit_message_text('<b>üí∏ –ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è Telegram Premium</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.cancel())

    await States.change.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ–≥–æ-–ª–∏–±–æ –≤ –±–æ—Ç–µ
@dp.message_handler(state=States.change, chat_type='private')
async def change_something(msg: types.Message, state: FSMContext):
    what_change = await state.get_data()
    what_change = what_change['change']

    settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

    message = msg.text

    match what_change:
        case 'welcomeMessage':
            settings.welcome_message = message
            settings.save()

            await msg.answer('<b>üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å</b>', reply_markup=keyboards.admin_menu())
        case 'qiwi':
            settings.qiwi_token = message
            settings.save()

            await msg.answer('<b>ü•ù QIWI —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è</b>', reply_markup=keyboards.admin_menu())
        case 'crypto':
            settings.crypto_token = message
            settings.save()

            await msg.answer('<b>ü§ñ –°ryptoBot —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è</b>', reply_markup=keyboards.admin_menu())
        case 'crystal':
            message = message.split()
            settings.crystal_secret = message[0]
            settings.crystal_name = message[1]
            settings.save()

            await msg.answer('<b>üíé CrystalPAY —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è</b>', reply_markup=keyboards.admin_menu())
        case 'price':
            try:
                message = int(message)
                settings.price = message
                settings.save()

                await msg.answer('<b>üí∞ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å</b>', reply_markup=keyboards.admin_menu())
            except:
                await msg.answer('<b>‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ</b>', reply_markup=keyboards.cancel())
                return

    await state.finish()


# –†–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query_handler(text='mailing')
async def mailing(call: types.CallbackQuery):
    await bot.edit_message_text('<b>üìù –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.cancel())

    await States.mailing.set()


# –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(content_types=types.ContentTypes.ANY, state=States.mailing, chat_type='private')
async def send_mailing(msg: types.Message, state: FSMContext):
    sent = 0
    not_sent = 0

    await msg.answer('<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>', reply_markup=keyboards.admin_menu())

    if msg.content_type == 'photo':

        if msg.caption is not None:

            for user in db.User.select():
                try:
                    await bot.send_photo(user.user_id, msg.photo[-1].file_id, msg.caption)

                    sent += 1
                except:
                    not_sent += 1

                    continue

        else:

            for user in db.User.select():
                try:
                    await bot.send_photo(user.user_id, msg.photo[-1].file_id)

                    sent += 1
                except:
                    not_sent += 1

                    continue

    elif msg.content_type == 'document':

        if msg.caption is not None:

            for user in db.User.select():
                try:
                    await bot.send_document(user.user_id, msg.document.file_id, caption=msg.caption)

                    sent += 1
                except:
                    not_sent += 1

                    continue

        else:

            for user in db.User.select():
                try:
                    await bot.send_document(user.user_id, msg.document.file_id)

                    sent += 1
                except:
                    not_sent += 1

                    continue

    elif msg.content_type == 'text':

        for user in db.User.select():
            try:
                await bot.send_message(user.user_id, msg.text)

                sent += 1
            except:
                not_sent += 1

                continue

    elif msg.content_type == 'video':

        if msg.caption is not None:

            for user in db.User.select():
                try:
                    await bot.send_video(user.user_id, msg.video.file_id, caption=msg.caption)

                    sent += 1
                except:
                    not_sent += 1

                    continue

        else:

            for user in db.User.select():
                try:
                    await bot.send_video(user.user_id, msg.video.file_id)

                    sent += 1
                except:
                    not_sent += 1

                    continue

    elif msg.content_type == 'animation':

        if msg.caption is not None:

            for user in db.User.select():
                try:
                    await bot.send_animation(user.user_id, msg.animation.file_id, caption=msg.caption)

                    sent += 1
                except:
                    not_sent += 1

                    continue

        else:

            for user in db.User.select():
                try:
                    await bot.send_animation(user.user_id, msg.animation.file_id)

                    sent += 1
                except:
                    not_sent += 1

                    continue

    await msg.answer(f'<b>üõé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\nüîî - {sent}\nüîï - {not_sent}</b>')

    await state.finish()


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query_handler(text='cancel', state=[States.change, States.mailing])
async def cancel_action(call: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text('<b>‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.admin_menu())

    await state.finish()


# –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'], chat_type='private')
async def start_message(msg: types.Message):
    if not db.User.get_or_none(db.User.user_id == msg.from_id):

        db.User.create(user_id=msg.from_id)

    settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

    await msg.answer(f'<b>{settings.welcome_message}</b>', reply_markup=keyboards.user_menu())


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query_handler(text='support')
async def support(call: types.CallbackQuery):
    support = config.support

    await bot.edit_message_text(f'<b>‚öôÔ∏è –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {support}</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.back())


# –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞
@dp.callback_query_handler(text='buy')
async def buy(call: types.CallbackQuery):
    settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

    await bot.edit_message_text(f'<b>üí∞ –¶–µ–Ω–∞: {settings.price} ‚ÇΩ\nüí∏ –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.payments())


# –û–ø–ª–∞—Ç–∞ –∫–∏–≤–∏
@dp.callback_query_handler(text='qiwi')
async def qiwi_pay(call: types.CallbackQuery):
    settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

    bill = await payments.create_bill_qiwi(settings.price)

    await bot.edit_message_text('<b>üî• –û–ø–ª–∞—Ç–∏ —Å—á—ë—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å –æ–ø–ª–∞—Ç—É</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.qiwi(bill[1], bill[0]))


# –û–ø–ª–∞—Ç–∞ –∫—Ä–∏—Å—Ç–∞–ª
@dp.callback_query_handler(text='crystal')
async def crystal_pay(call: types.CallbackQuery):
    settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

    bill = await payments.create_bill_crystal(settings.price)

    await bot.edit_message_text('<b>üî• –û–ø–ª–∞—Ç–∏ —Å—á—ë—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å –æ–ø–ª–∞—Ç—É</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.crystal(bill[1], bill[0]))


# –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ
@dp.callback_query_handler(text='crypto')
async def crypto_pay(call: types.CallbackQuery):
    await bot.edit_message_text('<b>ü™ô –í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —Ö–æ—á–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç:</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.types_crypto())


# –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ
@dp.callback_query_handler(text_startswith='type_')
async def type_crypto(call: types.CallbackQuery):
    crypto = call.data.split('_')[1]
    settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

    bill = payments.CryptoBot().create_bill(crypto, settings.price)

    await bot.edit_message_text('<b>üî• –û–ø–ª–∞—Ç–∏ —Å—á—ë—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å –æ–ø–ª–∞—Ç—É</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.crypto(bill[1], bill[0]))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text_startswith='check')
async def check_payment(call: types.CallbackQuery):
    payment_method = call.data.split('|')[1]
    id = call.data.split('|')[2]

    match payment_method:
        case 'qiwi':
            payed = await payments.check_bill_qiwi(id)

            match payed:
                case 'PAID':
                    await bot.edit_message_text('<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –¢–ì –ü—Ä–µ–º–∏—É–º</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.user_menu())

                    for admin in config.admins:
                        await bot.send_message(admin, f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É</b>')
                case 'EXPIRED':
                    await bot.edit_message_text('<b>üßê –°—á—ë—Ç –±—ã–ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.user_menu())
                case _:
                    await call.answer('‚õîÔ∏è –°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω')
        case 'crystal':
            payed = await payments.check_pay_crystal(id)

            match payed:
                case 'PAID':
                    await bot.edit_message_text('<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –¢–ì –ü—Ä–µ–º–∏—É–º</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.user_menu())

                    for admin in config.admins:
                        await bot.send_message(admin, f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É</b>')
                case _:
                    await call.answer('‚õîÔ∏è –°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω')
        case 'crypto':
            payed = payments.CryptoBot().get_bill_status(id)

            match payed:
                case 'paid':
                    await bot.edit_message_text('<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –¢–ì –ü—Ä–µ–º–∏—É–º</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.user_menu())

                    for admin in config.admins:
                        await bot.send_message(admin, f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É</b>')
                case 'expired':
                    await bot.edit_message_text('<b>üßê –°—á—ë—Ç –±—ã–ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.user_menu())
                case _:
                    await call.answer('‚õîÔ∏è –°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω')


# –ù–∞–∑–∞–¥ –∫—É–¥–∞-–ª–∏–±–æ
@dp.callback_query_handler(text_startswith='back_')
async def back(call: types.CallbackQuery):
    where = call.data.split('_')[1]

    match where:
        case 'start':
            settings = db.Settings.get(db.Settings.id == 1)  # type: ignore

            await bot.edit_message_text(f'<b>{settings.welcome_message}</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.user_menu())
        case 'payments':
            await bot.edit_message_text('<b>üí∏ –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.payments())
        case 'typeCrypto':
            await bot.edit_message_text('<b>ü™ô –í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —Ö–æ—á–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç:</b>', call.from_user.id, call.message.message_id, reply_markup=keyboards.types_crypto())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True,
                           on_startup=set_default_commands)
